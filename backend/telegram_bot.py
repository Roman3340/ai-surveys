import asyncio
import logging
import os
from datetime import datetime
from typing import Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, WebAppData
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session
from dotenv import load_dotenv

from app.core.database import SessionLocal
from app.models.user import User
from app.models.survey import Survey  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã relationships
from app.models.question import Question  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã relationships
from app.schemas.user import UserCreate

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("bot.env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEB_APP_URL = os.getenv("WEB_APP_URL", "http://localhost:5173")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


def get_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


async def create_or_update_user(user_data: types.User, db: Session, app_opened: bool = False) -> User:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        current_time = datetime.utcnow()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db.query(User).filter(User.telegram_id == user_data.id).first()
        
        if existing_user:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_user.username = user_data.username
            existing_user.first_name = user_data.first_name
            existing_user.last_name = user_data.last_name
            existing_user.language_code = user_data.language_code or "ru"
            existing_user.last_activity = current_time
            existing_user.updated_at = current_time
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if app_opened:
                if not existing_user.app_opened_at:
                    existing_user.app_opened_at = current_time  # –ü–µ—Ä–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ
                existing_user.app_opened_count += 1
                existing_user.last_app_opened_at = current_time
            
            db.commit()
            db.refresh(existing_user)
            logger.info(f"Updated user: {existing_user.telegram_id}, app_opened: {app_opened}")
            return existing_user
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                telegram_id=user_data.id,
                username=user_data.username,
                first_name=user_data.first_name,
                last_name=user_data.last_name,
                language_code=user_data.language_code or "ru",
                is_active=True,
                is_premium=getattr(user_data, 'is_premium', False),
                created_at=current_time,
                last_activity=current_time,
                bot_started_at=current_time,  # –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É
                app_opened_count=1 if app_opened else 0,
                app_opened_at=current_time if app_opened else None,
                last_app_opened_at=current_time if app_opened else None
            )
            
            db.add(new_user)
            db.commit()
            db.refresh(new_user)
            logger.info(f"Created new user: {new_user.telegram_id}, app_opened: {app_opened}")
            return new_user
            
    except Exception as e:
        logger.error(f"Error creating/updating user: {e}")
        db.rollback()
        raise


@dp.message(CommandStart())
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db = next(get_db())
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (app_opened=False - —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞)
        user = await create_or_update_user(message.from_user, db, app_opened=False)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(
                text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url=WEB_APP_URL)
            )
        )
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"""
üéâ <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>

–Ø ‚Äî <b>AI Surveys Bot</b> ü§ñ ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–º–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤!

‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏  
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

üéØ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"</b> —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å!

üí° <b>–°–æ–≤–µ—Ç:</b> –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ–ø—Ä–æ—Å–∞ (–¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏–ª–∏ –ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π) –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ò–ò.

–£–¥–∞—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤! üìä‚ú®
        """
        
        await message.answer(
            welcome_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        
        logger.info(f"Sent welcome message to user {user.telegram_id}")
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        web_app_data = message.web_app_data
        data = web_app_data.data
        
        logger.info(f"Web app data received from user {message.from_user.id}: {data}")
        
        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
        try:
            import json
            parsed_data = json.loads(data)
            action = parsed_data.get('action', 'unknown')
            logger.info(f"Parsed action: {action}")
        except json.JSONDecodeError:
            logger.warning(f"Failed to parse JSON data: {data}")
            action = 'unknown'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–ª–∞–≥–æ–º app_opened=True
        user = await create_or_update_user(message.from_user, db, app_opened=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ <b>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ!</b>\n\n"
            f"–î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
            f"–û—Ç–∫—Ä—ã—Ç–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {user.app_opened_count}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error handling web app data: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
        )


@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É AI Surveys</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö –æ–ø—Ä–æ—Å–æ–≤

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –ò–ò
4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.
    """
    
    await message.answer(help_text, parse_mode="HTML")


@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = next(get_db())
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # surveys_count = db.query(Survey).filter(Survey.user_id == user.id).count()
        
        stats_text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>
‚Ä¢ –ò–º—è: {user.first_name} {user.last_name or ''}
‚Ä¢ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –Ø–∑—ã–∫: {user.language_code}
‚Ä¢ Premium: {'‚úÖ' if user.is_premium else '‚ùå'}

üìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞: {user.bot_started_at.strftime('%d.%m.%Y %H:%M') if user.bot_started_at else '–ù–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ'}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%d.%m.%Y %H:%M')}

üöÄ <b>–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {'‚úÖ' if user.app_opened_at else '‚ùå'}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç–∏–π: {user.app_opened_count}
‚Ä¢ –ü–µ—Ä–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ: {user.app_opened_at.strftime('%d.%m.%Y %H:%M') if user.app_opened_at else '–ù–∏–∫–æ–≥–¥–∞'}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ: {user.last_app_opened_at.strftime('%d.%m.%Y %H:%M') if user.last_app_opened_at else '–ù–∏–∫–æ–≥–¥–∞'}

üìà <b>–û–ø—Ä–æ—Å—ã:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –æ–ø—Ä–æ—Å–æ–≤: 0 (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤: 0 (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
        """
        
        await message.answer(stats_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in stats command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@dp.message()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("Starting AI Surveys Bot...")
    
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
