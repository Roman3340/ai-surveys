// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π —ç–º–æ–¥–∑–∏ –∏–∑ Telegram

declare global {
  interface Window {
    Telegram: {
      WebApp: {
        // –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã Telegram WebApp
        sendData: (data: string) => void;
        ready: () => void;
        expand: () => void;
        close: () => void;
        // –°–∫—Ä—ã—Ç—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ–¥–∑–∏
        showPopup: (params: any) => void;
        showAlert: (message: string) => void;
        // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ (–Ω–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        EmojiRenderer?: {
          renderAnimated: (emoji: string, size: number) => HTMLElement;
          getAnimationData: (emoji: string) => any;
        };
        // –î–æ—Å—Ç—É–ø –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Ä–µ—Å—É—Ä—Å–∞–º Telegram
        version: string;
        platform: string;
        colorScheme: 'light' | 'dark';
        themeParams: any;
        initData: string;
        initDataUnsafe: any;
        MainButton: any;
        BackButton: any;
        HapticFeedback: any;
      };
    };
  }
}

export interface TelegramEmojiData {
  emoji: string;
  animationUrl?: string;
  lottieData?: any;
  tgsData?: ArrayBuffer;
  webmUrl?: string;
}

export class TelegramEmojiExtractor {
  private static instance: TelegramEmojiExtractor;
  private emojiCache = new Map<string, TelegramEmojiData>();
  private isInitialized = false;

  static getInstance(): TelegramEmojiExtractor {
    if (!TelegramEmojiExtractor.instance) {
      TelegramEmojiExtractor.instance = new TelegramEmojiExtractor();
    }
    return TelegramEmojiExtractor.instance;
  }

  async initialize(): Promise<void> {
    if (this.isInitialized) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp
      if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
        console.log('üöÄ Telegram WebApp detected, initializing emoji extractor...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        window.Telegram.WebApp.ready();
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –º–µ—Ç–æ–¥–∞–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —ç–º–æ–¥–∑–∏
        await this.extractTelegramEmojiMethods();
        
        this.isInitialized = true;
        console.log('‚úÖ Telegram emoji extractor initialized');
      } else {
        console.log('‚ö†Ô∏è Not in Telegram environment, using fallback methods');
        await this.initializeFallbackMethods();
      }
    } catch (error) {
      console.error('‚ùå Failed to initialize Telegram emoji extractor:', error);
      await this.initializeFallbackMethods();
    }
  }

  private async extractTelegramEmojiMethods(): Promise<void> {
    const tg = window.Telegram.WebApp;
    
    // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É —Ä–µ–Ω–¥–µ—Ä–µ—Ä—É —ç–º–æ–¥–∑–∏
    try {
      // Telegram –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ —Å–∫—Ä—ã—Ç—ã–µ API
      const emojiRenderer = (tg as any).EmojiRenderer;
      if (emojiRenderer) {
        console.log('üéØ Found Telegram EmojiRenderer!');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        (window as any).__telegramEmojiRenderer = emojiRenderer;
      }
    } catch (error) {
      console.log('EmojiRenderer not available:', error);
    }

    // –ú–µ—Ç–æ–¥ 2: –ê–Ω–∞–ª–∏–∑ DOM –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏
    try {
      await this.analyzeTelegramDOM();
    } catch (error) {
      console.log('DOM analysis failed:', error);
    }

    // –ú–µ—Ç–æ–¥ 3: –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ä–µ—Å—É—Ä—Å–∞–º —ç–º–æ–¥–∑–∏
    try {
      this.interceptEmojiRequests();
    } catch (error) {
      console.log('Network interception failed:', error);
    }
  }

  private async analyzeTelegramDOM(): Promise<void> {
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏ –≤ DOM Telegram
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node as Element;
            
            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏
            const emojiElements = element.querySelectorAll('[data-emoji], .emoji, .animated-emoji');
            emojiElements.forEach((emojiEl) => {
              this.extractEmojiFromElement(emojiEl as HTMLElement);
            });
          }
        });
      });
    });

    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
    observer.observe(document.body, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: ['data-emoji', 'src', 'style']
    });
  }

  private extractEmojiFromElement(element: HTMLElement): void {
    try {
      const emoji = element.getAttribute('data-emoji') || element.textContent?.trim();
      if (!emoji) return;

      const emojiData: TelegramEmojiData = { emoji };

      // –ò—â–µ–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const style = window.getComputedStyle(element);
      const backgroundImage = style.backgroundImage;
      
      if (backgroundImage && backgroundImage !== 'none') {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∞–Ω–∏–º–∞—Ü–∏–∏
        const urlMatch = backgroundImage.match(/url\(['"]?(.*?)['"]?\)/);
        if (urlMatch) {
          emojiData.animationUrl = urlMatch[1];
        }
      }

      // –ò—â–µ–º Lottie –¥–∞–Ω–Ω—ã–µ
      const lottieData = (element as any).__lottie;
      if (lottieData) {
        emojiData.lottieData = lottieData;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      this.emojiCache.set(emoji, emojiData);
      console.log(`üì¶ Cached emoji data for: ${emoji}`, emojiData);
    } catch (error) {
      console.error('Failed to extract emoji from element:', error);
    }
  }

  private interceptEmojiRequests(): void {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —ç–º–æ–¥–∑–∏
    const originalFetch = window.fetch;
    window.fetch = async (...args) => {
      const response = await originalFetch(...args);
      
      try {
        const url = args[0] as string;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –∫ —Ä–µ—Å—É—Ä—Å–∞–º —ç–º–æ–¥–∑–∏
        if (url.includes('emoji') || url.includes('sticker') || url.includes('.tgs') || url.includes('.webm')) {
          console.log('üéØ Intercepted emoji resource:', url);
          
          // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          const clonedResponse = response.clone();
          
          if (url.endsWith('.tgs')) {
            // TGS —Ñ–∞–π–ª (Telegram Sticker)
            const arrayBuffer = await clonedResponse.arrayBuffer();
            this.processTGSFile(url, arrayBuffer);
          } else if (url.endsWith('.webm') || url.endsWith('.gif')) {
            // –í–∏–¥–µ–æ –∞–Ω–∏–º–∞—Ü–∏—è
            this.processVideoAnimation(url);
          }
        }
      } catch (error) {
        console.log('Error processing intercepted request:', error);
      }
      
      return response;
    };
  }

  private async processTGSFile(url: string, data: ArrayBuffer): Promise<void> {
    try {
      // TGS —ç—Ç–æ —Å–∂–∞—Ç—ã–π JSON (Lottie)
      const decompressed = await this.decompressTGS(data);
      const lottieData = JSON.parse(decompressed);
      
      console.log('üì¶ Extracted Lottie data from TGS:', url, lottieData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      // –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–º—É —ç–º–æ–¥–∑–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–π–ª
      // –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ URL –∏–ª–∏ –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
    } catch (error) {
      console.error('Failed to process TGS file:', error);
    }
  }

  private async decompressTGS(data: ArrayBuffer): Promise<string> {
    // TGS —Ñ–∞–π–ª—ã —Å–∂–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é gzip
    try {
      const decompressed = await new Response(
        new Response(data).body?.pipeThrough(new DecompressionStream('gzip'))
      ).text();
      return decompressed;
    } catch (error) {
      // Fallback: –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª –Ω–µ —Å–∂–∞—Ç
      return new TextDecoder().decode(data);
    }
  }

  private processVideoAnimation(url: string): void {
    console.log('üé¨ Found video animation:', url);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤–∏–¥–µ–æ –∞–Ω–∏–º–∞—Ü–∏–∏
  }

  private async initializeFallbackMethods(): Promise<void> {
    console.log('üîÑ Initializing fallback emoji methods...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —ç–º–æ–¥–∑–∏
    await this.loadPresetEmojiAnimations();
    
    this.isInitialized = true;
  }

  private async loadPresetEmojiAnimations(): Promise<void> {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —ç–º–æ–¥–∑–∏ –∏–∑ Telegram
    const presetEmojis = [
      { emoji: 'üí°', lottieUrl: '/emoji-animations/lightbulb.json' },
      { emoji: '‚ö°', lottieUrl: '/emoji-animations/lightning.json' },
      { emoji: 'ü§ñ', lottieUrl: '/emoji-animations/robot.json' },
      { emoji: 'üëã', lottieUrl: '/emoji-animations/wave.json' },
      { emoji: 'üìù', lottieUrl: '/emoji-animations/pencil.json' },
      { emoji: 'üìä', lottieUrl: '/emoji-animations/chart.json' },
      { emoji: 'üéÅ', lottieUrl: '/emoji-animations/gift.json' },
      { emoji: 'üìö', lottieUrl: '/emoji-animations/books.json' },
    ];

    for (const preset of presetEmojis) {
      try {
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–∏ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ Telegram
        this.emojiCache.set(preset.emoji, {
          emoji: preset.emoji,
          animationUrl: preset.lottieUrl
        });
      } catch (error) {
        console.log(`Failed to load preset for ${preset.emoji}:`, error);
      }
    }
  }

  async getEmojiAnimation(emoji: string): Promise<TelegramEmojiData | null> {
    if (!this.isInitialized) {
      await this.initialize();
    }

    return this.emojiCache.get(emoji) || null;
  }

  async getAllCachedEmojis(): Promise<TelegramEmojiData[]> {
    return Array.from(this.emojiCache.values());
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
  async forceExtractEmoji(emoji: string): Promise<TelegramEmojiData | null> {
    try {
      if (window.Telegram?.WebApp) {
        // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å —ç–º–æ–¥–∑–∏ –∏ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∞–Ω–∏–º–∞—Ü–∏—é
        const tempDiv = document.createElement('div');
        tempDiv.textContent = emoji;
        tempDiv.style.fontSize = '64px';
        tempDiv.style.position = 'absolute';
        tempDiv.style.left = '-9999px';
        document.body.appendChild(tempDiv);

        // –ñ–¥—ë–º, –ø–æ–∫–∞ Telegram –ø—Ä–∏–º–µ–Ω–∏—Ç –∞–Ω–∏–º–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 1000));

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        this.extractEmojiFromElement(tempDiv);

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        document.body.removeChild(tempDiv);

        return this.emojiCache.get(emoji) || null;
      }
    } catch (error) {
      console.error('Failed to force extract emoji:', error);
    }

    return null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const telegramEmojiExtractor = TelegramEmojiExtractor.getInstance();
