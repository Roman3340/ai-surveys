import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { ChevronDown } from 'lucide-react';
import { DateTimePicker } from '../../components/ui/DateTimePicker';
import RealTelegramEmoji from '../../components/ui/RealTelegramEmoji';
import { useStableBackButton } from '../../hooks/useStableBackButton';
import { getDraft, saveSettings } from '../../utils/surveyDraft';

const ManualSurveyPage: React.FC = () => {
  const navigate = useNavigate();
  const [isKeyboardActive, setIsKeyboardActive] = useState(false);

  const [surveyData, setSurveyData] = useState(() => {
    const draft = getDraft();
    return {
      title: draft?.settings?.title || '',
      description: draft?.settings?.description || '',
      language: draft?.settings?.language || 'ru',
      startDate: draft?.settings?.startDate || '',
      startTime: draft?.settings?.startTime || '',
      endDate: draft?.settings?.endDate || '',
      endTime: draft?.settings?.endTime || '',
      maxParticipants: draft?.settings?.maxParticipants || ''
    };
  });


  const handleNext = () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫
    saveSettings({
      ...surveyData,
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–ø—Ä–æ—Å–∞
      allowAnonymous: false,
      showProgress: false,
      randomizeQuestions: false,
      oneResponsePerUser: true,
      collectTelegramData: false,
      creationType: 'manual',
      motivationEnabled: false,
      motivationType: 'discount',
      motivationDetails: ''
    });
    navigate('/survey/create/manual/settings', {
      state: surveyData
    });
  };

  const handleSurveyDataChange = (field: string, value: any) => {
    setSurveyData(prev => ({ ...prev, [field]: value }));
  };

  const handleInputFocus = (e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setIsKeyboardActive(true);
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞
    setTimeout(() => {
      e.target.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
      });
    }, 300);
  };

  const handleInputBlur = () => {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å–ø–µ–ª–∞ —Å–∫—Ä—ã—Ç—å—Å—è
    setTimeout(() => setIsKeyboardActive(false), 300);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      (e.target as HTMLElement).blur();
      setIsKeyboardActive(false);
    }
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
  useStableBackButton({
    onBack: () => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
      saveSettings({
        ...surveyData,
        allowAnonymous: false,
        showProgress: false,
        randomizeQuestions: false,
        oneResponsePerUser: true,
        collectTelegramData: false,
        creationType: 'manual',
        motivationEnabled: false,
        motivationType: 'discount',
        motivationDetails: ''
      });
      navigate('/survey/create', { replace: true });
    }
  });

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –≤–µ—Ä—Ö—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, []);

  return (
    <div 
      style={{ 
        minHeight: '100vh', 
        backgroundColor: 'var(--tg-bg-color)',
        color: 'var(--tg-text-color)',
      paddingBottom: '80px' // –ú–µ—Å—Ç–æ –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    }}
    className={isKeyboardActive ? 'keyboard-active' : ''}
    >
       {/* –®–∞–ø–∫–∞ */}
       <div style={{
         display: 'flex',
         alignItems: 'center',
         justifyContent: 'center',
         padding: '16px',
         borderBottom: '1px solid var(--tg-section-separator-color)',
         backgroundColor: 'var(--tg-bg-color)',
         position: 'sticky',
         top: 0,
         zIndex: 10
       }}>
         <h1 style={{
           fontSize: '20px',
           fontWeight: '600',
           margin: 0
         }}>
           –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
         </h1>
       </div>


      <div style={{ padding: '24px 16px' }} className="form-container">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          style={{ textAlign: 'center', marginBottom: '32px' }}
        >
          <div style={{ marginBottom: '10px' }}>
            <RealTelegramEmoji 
              emoji="üìù" 
              size="large" 
              onClick={() => console.log('üìù clicked!')}
            />
          </div>
          <div style={{
            display: 'flex',
            justifyContent: 'center',
            marginBottom: '8px'
          }}>
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
            <div style={{
              width: '280px',
              height: '6px',
              backgroundColor: 'rgba(244, 109, 0, 0.2)',
              borderRadius: '3px',
              overflow: 'hidden'
            }}>
                <motion.div
                  initial={{ width: '0%' }}
                  animate={{ width: '20%' }}
                  transition={{ duration: 0.3, ease: 'easeOut' }}
                  style={{
                    height: '100%',
                    background: 'linear-gradient(0deg, rgb(244, 109, 0) 0%, rgb(244, 109, 0) 100%)',
                    borderRadius: '3px'
                  }}
                />
            </div>
          </div>
        </motion.div>

        {/* –ü–æ–ª—è —Ñ–æ—Ä–º—ã */}
        <div style={{ maxWidth: '400px', margin: '0 auto' }}>
          {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
          <div style={{ marginBottom: '20px' }}>
            <label style={{
              display: 'block',
              fontSize: '16px',
              fontWeight: '500',
              marginBottom: '8px',
              color: 'var(--tg-text-color)'
            }}>
              –ù–∞–∑–≤–∞–Ω–∏–µ:
            </label>
             <input
               type="text"
               value={surveyData.title}
               onChange={(e) => handleSurveyDataChange('title', e.target.value)}
               onFocus={handleInputFocus}
               onBlur={handleInputBlur}
               onKeyDown={handleKeyDown}
               placeholder="–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"
               enterKeyHint="done"
               style={{
                 width: '100%',
                 padding: '12px 16px',
                 borderRadius: '8px',
                 border: '1px solid var(--tg-section-separator-color)',
                 backgroundColor: 'var(--tg-section-bg-color)',
                 color: 'var(--tg-text-color)',
                 fontSize: '16px',
                 outline: 'none'
               }}
             />
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div style={{ marginBottom: '20px' }}>
            <label style={{
              display: 'block',
              fontSize: '16px',
              fontWeight: '500',
              marginBottom: '8px',
              color: 'var(--tg-text-color)'
            }}>
              –û–ø–∏—Å–∞–Ω–∏–µ:
            </label>
             <textarea
               value={surveyData.description}
               onChange={(e) => handleSurveyDataChange('description', e.target.value)}
               onFocus={handleInputFocus}
               onBlur={handleInputBlur}
               onKeyDown={handleKeyDown}
               placeholder="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ"
               enterKeyHint="done"
               rows={4}
               style={{
                 width: '100%',
                 padding: '12px 16px',
                 borderRadius: '8px',
                 border: '1px solid var(--tg-section-separator-color)',
                 backgroundColor: 'var(--tg-section-bg-color)',
                 color: 'var(--tg-text-color)',
                 fontSize: '16px',
                 outline: 'none',
                 resize: 'vertical',
                 fontFamily: 'inherit'
               }}
             />
          </div>

          {/* –Ø–∑—ã–∫ */}
          <div style={{ marginBottom: '20px' }}>
            <label style={{
              display: 'block',
              fontSize: '16px',
              fontWeight: '500',
              marginBottom: '8px',
              color: 'var(--tg-text-color)'
            }}>
              –Ø–∑—ã–∫:
            </label>
            <div style={{
              position: 'relative'
            }}>
              <select
                value={surveyData.language}
                onChange={(e) => handleSurveyDataChange('language', e.target.value)}
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  borderRadius: '8px',
                  border: '1px solid var(--tg-section-separator-color)',
                  backgroundColor: 'var(--tg-section-bg-color)',
                  color: 'var(--tg-text-color)',
                  fontSize: '16px',
                  outline: 'none',
                  appearance: 'none',
                  cursor: 'pointer'
                }}
              >
                <option value="ru">üá∑üá∫ –†—É—Å—Å–∫–∏–π</option>
                <option value="en">üá∫üá∏ English</option>
              </select>
              <ChevronDown 
                size={20} 
                style={{
                  position: 'absolute',
                  right: '12px',
                  top: '50%',
                  transform: 'translateY(-50%)',
                  color: 'var(--tg-hint-color)',
                  pointerEvents: 'none'
                }}
              />
            </div>
          </div>

          {/* –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ */}
          <DateTimePicker
            label="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"
            value={surveyData.startDate}
            timeValue={surveyData.startTime}
            onChange={(date, time) => {
              handleSurveyDataChange('startDate', date);
              if (time) handleSurveyDataChange('startTime', time);
            }}
            placeholder="–°—Ä–∞–∑—É"
            disabled={false}
          />

          {/* –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
          <DateTimePicker
            label="–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
            value={surveyData.endDate}
            timeValue={surveyData.endTime}
            onChange={(date, time) => {
              handleSurveyDataChange('endDate', date);
              if (time) handleSurveyDataChange('endTime', time);
            }}
            placeholder="–ù–µ —É–∫–∞–∑–∞–Ω–∞"
          />

        </div>
      </div>

       {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–Ω–∏–∑—É */}
       <div
         className="fixed-buttons"
         style={{
           position: 'fixed',
           bottom: 0,
           left: 0,
           right: 0,
           padding: '16px',
           backgroundColor: 'var(--tg-bg-color)',
           borderTop: '1px solid var(--tg-section-separator-color)'
         }}
       >
         <button
           onClick={handleNext}
           style={{
             width: '100%',
             background: 'linear-gradient(0deg, rgb(244, 109, 0) 0%, rgb(244, 109, 0) 100%)',
             color: 'white',
             border: 'none',
             borderRadius: '12px',
             padding: '16px 24px',
             fontSize: '16px',
             fontWeight: '600',
             cursor: 'pointer'
           }}
         >
           –í–ø–µ—Ä–µ–¥
         </button>
       </div>
    </div>
  );
};

export default ManualSurveyPage;