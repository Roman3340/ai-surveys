import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Settings, HelpCircle, BarChart3, Users, Trash2 } from 'lucide-react';
import { AnimatedTabs } from '../../components/ui/AnimatedTabs';
import { useTelegram } from '../../hooks/useTelegram';
import { useAppStore } from '../../store/useAppStore';
import type { Survey } from '../../types';

export const HomePage = () => {
  const navigate = useNavigate();
  const { user: telegramUser, hapticFeedback } = useTelegram();
  const { user, userSurveys, participatedSurveys, setUser, loadUserSurveys, loadParticipatedSurveys, isLoading, error } = useAppStore();
  const [activeTab, setActiveTab] = useState<'created' | 'participated'>('created');
  const [showAllSurveys, setShowAllSurveys] = useState(false);
  const [deleteConfirm, setDeleteConfirm] = useState<{ survey: Survey | null; show: boolean }>({ survey: null, show: false });

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (telegramUser && !user) {
      const newUser = {
        id: Date.now(),
        telegramId: telegramUser.id,
        firstName: telegramUser.firstName,
        lastName: telegramUser.lastName,
        username: telegramUser.username,
        createdAt: new Date().toISOString(),
      };
      setUser(newUser);
    }
  }, [telegramUser, user, setUser]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏,
    // –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å–º. –∫–Ω–æ–ø–∫—É –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è)
    loadUserSurveys();
    loadParticipatedSurveys();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);


  const handleCreateSurvey = () => {
    hapticFeedback?.light();
    navigate('/survey/create');
  };

  const handleSettings = () => {
    hapticFeedback?.light();
    navigate('/settings');
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –≤–µ—Ä—Ö—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
    setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 100);
  };

  const handleViewAnalytics = (survey: Survey) => {
    hapticFeedback?.light();
    navigate(`/survey/${survey.id}`);
  };

  const handleViewTopSurveys = () => {
    hapticFeedback?.light();
    console.log('–¢–æ–ø –æ–ø—Ä–æ—Å–æ–≤');
  };

  const handleDeleteSurvey = (survey: Survey) => {
    hapticFeedback?.light();
    setDeleteConfirm({ survey, show: true });
  };

  const confirmDeleteSurvey = async () => {
    if (!deleteConfirm.survey) return;
    
    try {
      const { surveyApi } = await import('../../services/api');
      await surveyApi.deleteSurvey(deleteConfirm.survey.id);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤
      await loadUserSurveys();
      
      setDeleteConfirm({ survey: null, show: false });
      hapticFeedback?.success();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞:', error);
      hapticFeedback?.error();
    }
  };

  const cancelDeleteSurvey = () => {
    setDeleteConfirm({ survey: null, show: false });
    hapticFeedback?.light();
  };

  const handleShowAllSurveys = () => {
    hapticFeedback?.light();
    setShowAllSurveys(true);
  };

  const displayedSurveys = activeTab === 'created' ? userSurveys : participatedSurveys;

  const tabs = [
    { id: 'created' as const, label: '–°–æ–∑–¥–∞–Ω–Ω—ã–µ' },
    { id: 'participated' as const, label: '–ì–¥–µ —É—á–∞—Å—Ç–≤—É—é?' }
  ];

  const formatDate = (dateString?: string) => {
    if (!dateString) return '‚Äî';
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '‚Äî';
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  return (
    <div style={{
      backgroundColor: 'var(--tg-bg-color)',
      color: 'var(--tg-text-color)',
      minHeight: '100vh',
      padding: '0'
    }}>
      {/* –®–∞–ø–∫–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º */}
      <div style={{
        padding: '24px 16px 16px 16px'
      }}>
        <h1 style={{
          fontSize: '24px',
          fontWeight: '600',
          margin: 0,
          display: 'flex',
          alignItems: 'center',
          gap: '8px'
        }}>
          üëã –ü—Ä–∏–≤–µ—Ç, {user?.firstName || telegramUser?.firstName || '–†–æ–º–∞–Ω'}!
        </h1>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div style={{ padding: '0 16px' }}>
        {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ */}
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          marginBottom: '12px'
        }}>
          <div style={{ fontSize: '14px', color: 'var(--tg-hint-color)' }}>
            –°–æ–∑–¥–∞–≤–∞–π –æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞–π —Ü–µ–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
          </div>
          
          {/* –ú–∞–ª–µ–Ω—å–∫–∞—è –∫–Ω–æ–ø–∫–∞ "–ü–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å" */}
          <div style={{
            backgroundColor: 'var(--tg-section-bg-color)',
            borderRadius: '8px',
            padding: '6px 10px',
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            gap: '6px',
            border: '1px solid var(--tg-section-separator-color)'
          }}
          onClick={() => {
            hapticFeedback?.light();
            console.log('–ü–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
          }}>
            <span style={{ fontSize: '14px' }}>üíé</span>
            <span style={{ fontSize: '12px', fontWeight: '500' }}>–ü–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å</span>
          </div>
        </div>

        {/* –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–æ–≤—ã–π –æ–ø—Ä–æ—Å" */}
        <button
          onClick={handleCreateSurvey}
          style={{
            width: '100%',
            background: 'linear-gradient(0deg, rgb(244, 109, 0) 0%, rgb(244, 109, 0) 100%)',
            color: 'white',
            border: 'none',
            borderRadius: '12px',
            padding: '16px 24px',
            fontSize: '16px',
            fontWeight: '600',
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: '8px',
            marginTop: '30px',
            transition: 'transform 0.1s ease',
            marginBottom: '24px'
          }}
          onMouseDown={(e) => e.currentTarget.style.transform = 'scale(0.98)'}
          onMouseUp={(e) => e.currentTarget.style.transform = 'scale(1)'}
          onMouseLeave={(e) => e.currentTarget.style.transform = 'scale(1)'}
        >
          ‚ö° –ù–æ–≤—ã–π –æ–ø—Ä–æ—Å
        </button>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ */}
      <div style={{
        padding: '0 16px',
        display: 'flex',
        flexDirection: 'column',
        gap: '12px',
        marginBottom: '24px'
      }}>
        {/* –¢–æ–ø –æ–ø—Ä–æ—Å–æ–≤ */}
        <div style={{
          backgroundColor: 'var(--tg-section-bg-color)',
          borderRadius: '12px',
          padding: '16px',
          display: 'flex',
          alignItems: 'center',
          gap: '12px',
          cursor: 'pointer'
        }}
        onClick={handleViewTopSurveys}>
          <div style={{
            fontSize: '24px',
            width: '40px',
            height: '40px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}>
            ‚ö°
          </div>
          <div style={{ flex: 1 }}>
            <div style={{
              fontSize: '16px',
              fontWeight: '600',
              marginBottom: '2px'
            }}>
              –¢–æ–ø –æ–ø—Ä–æ—Å–æ–≤
            </div>
            <div style={{
              fontSize: '14px',
              color: 'var(--tg-hint-color)'
            }}>
              –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ–ø—Ä–æ—Å—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            </div>
          </div>
        </div>

        {/* –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π */}
        <div style={{
          backgroundColor: 'var(--tg-section-bg-color)',
          borderRadius: '12px',
          padding: '16px',
          display: 'flex',
          alignItems: 'center',
          gap: '12px',
          cursor: 'pointer'
        }}>
          <div style={{
            fontSize: '24px',
            width: '40px',
            height: '40px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}>
            üìö
          </div>
          <div style={{ flex: 1 }}>
            <div style={{
              fontSize: '16px',
              fontWeight: '600',
              marginBottom: '2px'
            }}>
              –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
            </div>
            <div style={{
              fontSize: '14px',
              color: 'var(--tg-hint-color)'
            }}>
              –ö–∞–∫ —Å–æ–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            </div>
          </div>
        </div>
      </div>

      {/* –°–µ–∫—Ü–∏—è "–û–ø—Ä–æ—Å—ã" —Å —Ç–∞–±–∞–º–∏ */}
      <div style={{ padding: '0 16px' }}>
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          marginBottom: '16px'
        }}>
          <h2 style={{
            fontSize: '20px',
            fontWeight: '600',
            margin: 0,
            display: 'flex',
            alignItems: 'center',
            gap: '8px'
          }}>
            üìä –û–ø—Ä–æ—Å—ã
          </h2>
          <button 
            onClick={handleShowAllSurveys}
            style={{
              background: 'none',
              border: 'none',
              color: 'var(--tg-link-color)',
              fontSize: '16px',
              cursor: 'pointer',
              fontWeight: '500'
            }}>
            –í—Å–µ
          </button>
        </div>

        {/* –¢–∞–±—ã */}
        <AnimatedTabs
          tabs={tabs}
          activeTab={activeTab}
          onTabChange={(tabId: string) => setActiveTab(tabId as 'created' | 'participated')}
        />

        {/* –°–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤ */}
        <div style={{ marginTop: '16px' }}>
          {isLoading ? (
            <div style={{
              textAlign: 'center',
              padding: '40px 20px',
              color: 'var(--tg-hint-color)'
            }}>
              <div style={{ fontSize: '48px', marginBottom: '16px' }}>
                ‚è≥
              </div>
              <p style={{
                fontSize: '16px',
                margin: '0',
                lineHeight: '1.4'
              }}>
                –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ä–æ—Å–æ–≤...
              </p>
            </div>
          ) : error ? (
            <div style={{
              textAlign: 'center',
              padding: '40px 20px',
              color: 'var(--tg-hint-color)'
            }}>
              <div style={{ fontSize: '48px', marginBottom: '16px' }}>
                ‚ùå
              </div>
              <p style={{
                fontSize: '16px',
                margin: '0 0 20px 0',
                lineHeight: '1.4'
              }}>
                {error}
              </p>
              <button 
                onClick={() => loadUserSurveys()} 
                style={{
                  backgroundColor: 'var(--tg-button-color)',
                  color: 'var(--tg-button-text-color)',
                  border: 'none',
                  borderRadius: '12px',
                  padding: '12px 24px',
                  fontSize: '15px',
                  fontWeight: '600',
                  cursor: 'pointer'
                }}
              >
                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          ) : displayedSurveys.length > 0 ? (
            <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
              {displayedSurveys.slice(0, 3).map((survey) => (
                <div
                  key={survey.id}
                  onClick={activeTab === 'created' ? () => handleViewAnalytics(survey) : undefined}
                  style={{
                    backgroundColor: 'var(--tg-section-bg-color)',
                    borderRadius: '12px',
                    padding: '16px',
                    cursor: activeTab === 'created' ? 'pointer' : 'default',
                    transition: 'transform 0.1s ease'
                  }}
                  onMouseDown={activeTab === 'created' ? (e) => e.currentTarget.style.transform = 'scale(0.98)' : undefined}
                  onMouseUp={activeTab === 'created' ? (e) => e.currentTarget.style.transform = 'scale(1)' : undefined}
                  onMouseLeave={activeTab === 'created' ? (e) => e.currentTarget.style.transform = 'scale(1)' : undefined}
                >
                  <div style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'flex-start',
                    marginBottom: '8px'
                  }}>
                    <h3 style={{
                      fontSize: '16px',
                      fontWeight: '600',
                      margin: 0,
                      flex: 1,
                      lineHeight: '1.3'
                    }}>
                      {survey.title}
                    </h3>
                    {activeTab === 'created' && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDeleteSurvey(survey);
                        }}
                        style={{
                          background: 'none',
                          border: 'none',
                          color: '#FF3B30',
                          cursor: 'pointer',
                          padding: '4px',
                          marginLeft: '8px',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center'
                        }}
                      >
                        <Trash2 size={16} />
                      </button>
                    )}
                  </div>
                  
                  <div style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    marginBottom: '8px'
                  }}>
                    <div style={{
                      fontSize: '14px',
                      color: 'var(--tg-hint-color)'
                    }}>
                      {activeTab === 'created' 
                        ? formatDate(survey.publishedAt || survey.createdAt)
                        : formatDate((survey as any).completed_at)
                      }
                    </div>
                  </div>
                  
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '16px',
                    marginTop: '8px'
                  }}>
                    {activeTab === 'created' ? (
                      <>
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '4px',
                          fontSize: '14px',
                          color: 'var(--tg-hint-color)'
                        }}>
                          <Users size={14} />
                          {survey.responsesCount ?? survey.responses?.length ?? 0}
                        </div>
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '4px',
                          fontSize: '14px',
                          color: 'var(--tg-hint-color)'
                        }}>
                          <BarChart3 size={14} />
                          {survey.questions.length} –≤–æ–ø—Ä.
                        </div>
                        {(() => {
                          const statusMap: Record<string, { text: string; color: string }> = {
                            active: { text: '–ê–∫—Ç–∏–≤–µ–Ω', color: '#34C759' },
                            draft: { text: '–ß–µ—Ä–Ω–æ–≤–∏–∫', color: '#8E8E93' },
                            completed: { text: '–ó–∞–≤–µ—Ä—à—ë–Ω', color: '#FF6B6B' },
                            archived: { text: '–ê—Ä—Ö–∏–≤', color: '#FF9500' }
                          };
                          const statusInfo = statusMap[survey.status] || { text: survey.status, color: '#8E8E93' };
                          return (
                            <div style={{
                              backgroundColor: statusInfo.color,
                              color: 'white',
                              fontSize: '12px',
                              padding: '2px 8px',
                              borderRadius: '6px',
                              fontWeight: '500'
                            }}>
                              {statusInfo.text}
                            </div>
                          );
                        })()}
                      </>
                    ) : (
                      <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '4px',
                        fontSize: '14px',
                        color: 'var(--tg-hint-color)'
                      }}>
                        <BarChart3 size={14} />
                        {(survey as any).questions_count || survey.questions?.length || 0} –≤–æ–ø—Ä.
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div style={{
              textAlign: 'center',
              padding: '40px 20px',
              color: 'var(--tg-hint-color)'
            }}>
              <div style={{ fontSize: '48px', marginBottom: '16px' }}>
                {activeTab === 'created' ? 'üìù' : 'üìã'}
              </div>
              <p style={{
                fontSize: '16px',
                margin: '0 0 20px 0',
                lineHeight: '1.4'
              }}>
                {activeTab === 'created' 
                  ? '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å'
                  : '–í—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –æ–ø—Ä–æ—Å–∞—Ö'
                }
              </p>
              {activeTab === 'created' && (
                <button 
                  onClick={handleCreateSurvey} 
                  style={{
                    backgroundColor: 'var(--tg-button-color)',
                    color: 'var(--tg-button-text-color)',
                    border: 'none',
                    borderRadius: '12px',
                    padding: '12px 24px',
                    fontSize: '15px',
                    fontWeight: '600',
                    cursor: 'pointer',
                    display: 'inline-flex',
                    alignItems: 'center',
                    gap: '6px'
                  }}
                >
                  üìä –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å
                </button>
              )}
            </div>
          )}
        </div>
      </div>


      {/* –ü–æ–¥—Ä–æ–±–Ω–µ–µ */}
      {displayedSurveys.length > 3 && (
        <div style={{
          padding: '16px',
          textAlign: 'center'
        }}>
          <button style={{
            backgroundColor: 'var(--tg-section-bg-color)',
            color: 'var(--tg-text-color)',
            border: 'none',
            borderRadius: '12px',
            padding: '12px 24px',
            fontSize: '16px',
            fontWeight: '500',
            cursor: 'pointer',
            width: '100%'
          }}>
            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
          </button>
        </div>
      )}

      {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
      <div style={{
        padding: '20px 16px 40px 16px',
        marginTop: '20px',
        borderTop: '1px solid var(--tg-section-separator-color)',
        display: 'flex',
        gap: '12px'
      }}>
        <button 
          onClick={handleSettings}
          style={{
          flex: 1,
          backgroundColor: 'var(--tg-section-bg-color)',
          color: 'var(--tg-text-color)',
          border: 'none',
          borderRadius: '12px',
          padding: '16px 20px',
          fontSize: '17px',
          fontWeight: '500',
          cursor: 'pointer',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          gap: '8px'
        }}>
          <Settings size={20} />
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        </button>
        <button style={{
          flex: 1,
          backgroundColor: 'var(--tg-section-bg-color)',
          color: 'var(--tg-text-color)',
          border: 'none',
          borderRadius: '12px',
          padding: '16px 20px',
          fontSize: '17px',
          fontWeight: '500',
          cursor: 'pointer',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          gap: '8px'
        }}>
          <HelpCircle size={20} />
          –ü–æ–¥–¥–µ—Ä–∂–∫–∞
        </button>
      </div>

      {/* Popup –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      {deleteConfirm.show && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1100,
          padding: '20px'
        }}>
          <div style={{
            backgroundColor: 'var(--tg-bg-color)',
            borderRadius: '12px',
            padding: '24px',
            maxWidth: '320px',
            width: '100%'
          }}>
            <h3 style={{
              fontSize: '18px',
              fontWeight: '600',
              margin: '0 0 12px 0',
              color: 'var(--tg-text-color)'
            }}>
              –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å?
            </h3>
            <p style={{
              fontSize: '14px',
              color: 'var(--tg-hint-color)',
              margin: '0 0 20px 0',
              lineHeight: '1.4'
            }}>
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å "{deleteConfirm.survey?.title}"? 
              –í—Å–µ –æ—Ç–≤–µ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.
            </p>
            <div style={{
              display: 'flex',
              gap: '12px'
            }}>
              <button
                onClick={cancelDeleteSurvey}
                style={{
                  flex: 1,
                  backgroundColor: 'var(--tg-section-bg-color)',
                  color: 'var(--tg-text-color)',
                  border: 'none',
                  borderRadius: '8px',
                  padding: '12px',
                  fontSize: '14px',
                  fontWeight: '500',
                  cursor: 'pointer'
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={confirmDeleteSurvey}
                style={{
                  flex: 1,
                  backgroundColor: '#FF3B30',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  padding: '12px',
                  fontSize: '14px',
                  fontWeight: '500',
                  cursor: 'pointer'
                }}
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Popup –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–æ–≤ */}
      {showAllSurveys && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000,
          padding: '20px'
        }}>
          <div style={{
            backgroundColor: 'var(--tg-bg-color)',
            borderRadius: '12px',
            padding: '20px',
            maxWidth: '400px',
            width: '100%',
            maxHeight: '80vh',
            overflow: 'auto'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '20px'
            }}>
              <h3 style={{
                fontSize: '18px',
                fontWeight: '600',
                margin: 0,
                color: 'var(--tg-text-color)'
              }}>
                {activeTab === 'created' ? '–í—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã' : '–í—Å–µ –æ–ø—Ä–æ—Å—ã —É—á–∞—Å—Ç–∏—è'}
              </h3>
              <button
                onClick={() => setShowAllSurveys(false)}
                style={{
                  background: 'none',
                  border: 'none',
                  color: 'var(--tg-hint-color)',
                  fontSize: '24px',
                  cursor: 'pointer',
                  padding: '4px'
                }}
              >
                √ó
              </button>
            </div>
            
            <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
              {displayedSurveys.map((survey) => (
                <div
                  key={survey.id}
                  onClick={activeTab === 'created' ? () => {
                    setShowAllSurveys(false);
                    handleViewAnalytics(survey);
                  } : undefined}
                  style={{
                    backgroundColor: 'var(--tg-section-bg-color)',
                    borderRadius: '12px',
                    padding: '16px',
                    cursor: activeTab === 'created' ? 'pointer' : 'default',
                    transition: 'transform 0.1s ease'
                  }}
                  onMouseDown={activeTab === 'created' ? (e) => e.currentTarget.style.transform = 'scale(0.98)' : undefined}
                  onMouseUp={activeTab === 'created' ? (e) => e.currentTarget.style.transform = 'scale(1)' : undefined}
                  onMouseLeave={activeTab === 'created' ? (e) => e.currentTarget.style.transform = 'scale(1)' : undefined}
                >
                  <div style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'flex-start',
                    marginBottom: '8px'
                  }}>
                    <h4 style={{
                      fontSize: '16px',
                      fontWeight: '600',
                      margin: 0,
                      flex: 1,
                      lineHeight: '1.3'
                    }}>
                      {survey.title}
                    </h4>
                    {activeTab === 'created' && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDeleteSurvey(survey);
                        }}
                        style={{
                          background: 'none',
                          border: 'none',
                          color: '#FF3B30',
                          cursor: 'pointer',
                          padding: '4px',
                          marginLeft: '8px',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center'
                        }}
                      >
                        <Trash2 size={16} />
                      </button>
                    )}
                  </div>
                  
                  <div style={{
                    fontSize: '14px',
                    color: 'var(--tg-hint-color)',
                    marginBottom: '8px'
                  }}>
                    {activeTab === 'created' 
                      ? formatDate(survey.publishedAt || survey.createdAt)
                      : formatDate((survey as any).completed_at)
                    }
                  </div>
                  
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '16px'
                  }}>
                    {activeTab === 'created' ? (
                      <>
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '4px',
                          fontSize: '14px',
                          color: 'var(--tg-hint-color)'
                        }}>
                          <Users size={14} />
                          {survey.responsesCount ?? survey.responses?.length ?? 0}
                        </div>
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '4px',
                          fontSize: '14px',
                          color: 'var(--tg-hint-color)'
                        }}>
                          <BarChart3 size={14} />
                          {survey.questions.length} –≤–æ–ø—Ä.
                        </div>
                        {(() => {
                          const statusMap: Record<string, { text: string; color: string }> = {
                            active: { text: '–ê–∫—Ç–∏–≤–µ–Ω', color: '#34C759' },
                            draft: { text: '–ß–µ—Ä–Ω–æ–≤–∏–∫', color: '#8E8E93' },
                            completed: { text: '–ó–∞–≤–µ—Ä—à—ë–Ω', color: '#FF6B6B' },
                            archived: { text: '–ê—Ä—Ö–∏–≤', color: '#FF9500' }
                          };
                          const statusInfo = statusMap[survey.status] || { text: survey.status, color: '#8E8E93' };
                          return (
                            <div style={{
                              backgroundColor: statusInfo.color,
                              color: 'white',
                              fontSize: '12px',
                              padding: '2px 8px',
                              borderRadius: '6px',
                              fontWeight: '500'
                            }}>
                              {statusInfo.text}
                            </div>
                          );
                        })()}
                      </>
                    ) : (
                      <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '4px',
                        fontSize: '14px',
                        color: 'var(--tg-hint-color)'
                      }}>
                        <BarChart3 size={14} />
                        {(survey as any).questions_count || survey.questions?.length || 0} –≤–æ–ø—Ä.
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};